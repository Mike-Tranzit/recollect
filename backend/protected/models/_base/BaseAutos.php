<?php

/**
 * This is the model base class for the table "autos".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Autos".
 *
 * Columns in table "autos" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property string $num_auto
 * @property integer $prov
 * @property integer $trader
 * @property string $windows
 * @property string $window_from
 * @property string $window_to
 * @property integer $confirm
 * @property string $date_cre
 * @property integer $culture
 * @property integer $receiver
 * @property string $phone
 * @property string $arrived
 * @property integer $move_counter
 * @property integer $is_dirty
 *
 */
abstract class BaseAutos extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'cms.autos';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Autos|Autoses', $n);
	}

	public static function representingColumn() {
		return 'windows';
	}

	public function rules() {
		return array(
			array('prov, trader, windows', 'required'),
			array('prov, trader, confirm, culture, receiver, move_counter, is_dirty', 'numerical', 'integerOnly'=>true),
			array('num_auto', 'length', 'max'=>25),
			array('arrived', 'length', 'max'=>1),
			array('window_from, window_to, date_cre, phone', 'safe'),
			array('num_auto, window_from, window_to, confirm, date_cre, culture, receiver, phone, arrived, move_counter, is_dirty', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, num_auto, prov, trader, windows, window_from, window_to, confirm, date_cre, culture, receiver, phone, arrived, move_counter, is_dirty', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'num_auto' => Yii::t('app', 'Num Auto'),
			'prov' => Yii::t('app', 'Prov'),
			'trader' => Yii::t('app', 'Trader'),
			'windows' => Yii::t('app', 'Windows'),
			'window_from' => Yii::t('app', 'Window From'),
			'window_to' => Yii::t('app', 'Window To'),
			'confirm' => Yii::t('app', 'Confirm'),
			'date_cre' => Yii::t('app', 'Date Cre'),
			'culture' => Yii::t('app', 'Culture'),
			'receiver' => Yii::t('app', 'Receiver'),
			'phone' => Yii::t('app', 'Phone'),
			'arrived' => Yii::t('app', 'Arrived'),
			'move_counter' => Yii::t('app', 'Move Counter'),
			'is_dirty' => Yii::t('app', 'Is Dirty'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('num_auto', $this->num_auto, true);
		$criteria->compare('prov', $this->prov);
		$criteria->compare('trader', $this->trader);
		$criteria->compare('windows', $this->windows, true);
		$criteria->compare('window_from', $this->window_from, true);
		$criteria->compare('window_to', $this->window_to, true);
		$criteria->compare('confirm', $this->confirm);
		$criteria->compare('date_cre', $this->date_cre, true);
		$criteria->compare('culture', $this->culture);
		$criteria->compare('receiver', $this->receiver);
		$criteria->compare('phone', $this->phone, true);
		$criteria->compare('arrived', $this->arrived, true);
		$criteria->compare('move_counter', $this->move_counter);
		$criteria->compare('is_dirty', $this->is_dirty);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}