<?php

/**
 * This is the model base class for the table "users".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Users".
 *
 * Columns in table "users" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property string $login
 * @property string $password
 * @property string $last_in
 * @property string $name
 * @property integer $admin
 * @property integer $activ
 * @property string $generate
 * @property integer $isProvider
 * @property integer $role
 * @property integer $confirm
 * @property string $company
 * @property string $email
 * @property string $skype
 * @property integer $occupation
 * @property string $status_id
 * @property string $balance
 * @property string $status_expiry
 * @property string $show_nat_services
 * @property string $working_with_nds
 * @property string $company_id
 * @property string $place
 * @property string $place_code
 * @property string $region
 * @property string $region_code
 * @property double $rating
 * @property integer $has_docs
 * @property integer $forum_blocked
 * @property string $forum_block_expiry
 *
 */
abstract class BaseUsers extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'glonass.users';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Users|Users', $n);
	}

	public static function representingColumn() {
		return 'balance';
	}

	public function rules() {
		return array(
			array('admin, activ, isProvider, role, confirm, occupation, has_docs, forum_blocked', 'numerical', 'integerOnly'=>true),
			array('rating', 'numerical'),
			array('login', 'length', 'max'=>50),
			array('password, name, generate, company, email, skype, place, region', 'length', 'max'=>255),
			array('status_id', 'length', 'max'=>11),
			array('balance, company_id', 'length', 'max'=>10),
			array('show_nat_services, working_with_nds', 'length', 'max'=>1),
			array('place_code, region_code', 'length', 'max'=>13),
			array('last_in, status_expiry, forum_block_expiry', 'safe'),
			array('login, password, last_in, name, admin, activ, generate, isProvider, role, confirm, company, email, skype, occupation, status_id, balance, status_expiry, show_nat_services, working_with_nds, company_id, place, place_code, region, region_code, rating, has_docs, forum_blocked, forum_block_expiry', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, login, password, last_in, name, admin, activ, generate, isProvider, role, confirm, company, email, skype, occupation, status_id, balance, status_expiry, show_nat_services, working_with_nds, company_id, place, place_code, region, region_code, rating, has_docs, forum_blocked, forum_block_expiry', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'login' => Yii::t('app', 'Login'),
			'password' => Yii::t('app', 'Password'),
			'last_in' => Yii::t('app', 'Last In'),
			'name' => Yii::t('app', 'Name'),
			'admin' => Yii::t('app', 'Admin'),
			'activ' => Yii::t('app', 'Activ'),
			'generate' => Yii::t('app', 'Generate'),
			'isProvider' => Yii::t('app', 'Is Provider'),
			'role' => Yii::t('app', 'Role'),
			'confirm' => Yii::t('app', 'Confirm'),
			'company' => Yii::t('app', 'Company'),
			'email' => Yii::t('app', 'Email'),
			'skype' => Yii::t('app', 'Skype'),
			'occupation' => Yii::t('app', 'Occupation'),
			'status_id' => Yii::t('app', 'Status'),
			'balance' => Yii::t('app', 'Balance'),
			'status_expiry' => Yii::t('app', 'Status Expiry'),
			'show_nat_services' => Yii::t('app', 'Show Nat Services'),
			'working_with_nds' => Yii::t('app', 'Working With Nds'),
			'company_id' => Yii::t('app', 'Company'),
			'place' => Yii::t('app', 'Place'),
			'place_code' => Yii::t('app', 'Place Code'),
			'region' => Yii::t('app', 'Region'),
			'region_code' => Yii::t('app', 'Region Code'),
			'rating' => Yii::t('app', 'Rating'),
			'has_docs' => Yii::t('app', 'Has Docs'),
			'forum_blocked' => Yii::t('app', 'Forum Blocked'),
			'forum_block_expiry' => Yii::t('app', 'Forum Block Expiry'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('login', $this->login, true);
		$criteria->compare('password', $this->password, true);
		$criteria->compare('last_in', $this->last_in, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('admin', $this->admin);
		$criteria->compare('activ', $this->activ);
		$criteria->compare('generate', $this->generate, true);
		$criteria->compare('isProvider', $this->isProvider);
		$criteria->compare('role', $this->role);
		$criteria->compare('confirm', $this->confirm);
		$criteria->compare('company', $this->company, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('skype', $this->skype, true);
		$criteria->compare('occupation', $this->occupation);
		$criteria->compare('status_id', $this->status_id, true);
		$criteria->compare('balance', $this->balance, true);
		$criteria->compare('status_expiry', $this->status_expiry, true);
		$criteria->compare('show_nat_services', $this->show_nat_services, true);
		$criteria->compare('working_with_nds', $this->working_with_nds, true);
		$criteria->compare('company_id', $this->company_id, true);
		$criteria->compare('place', $this->place, true);
		$criteria->compare('place_code', $this->place_code, true);
		$criteria->compare('region', $this->region, true);
		$criteria->compare('region_code', $this->region_code, true);
		$criteria->compare('rating', $this->rating);
		$criteria->compare('has_docs', $this->has_docs);
		$criteria->compare('forum_blocked', $this->forum_blocked);
		$criteria->compare('forum_block_expiry', $this->forum_block_expiry, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}